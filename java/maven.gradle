apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

def groupId = "io.ably"
def artifactId = "ably-java"
def localReleaseDest = "${buildDir}/release/${version}"
def mavenUser = hasProperty('ossrhUsername') ? ossrhUsername : ''
def mavenPassword = hasProperty('ossrhPassword') ? ossrhPassword : ''

/*
 * Task which signs and uploads the Java artifacts to Nexus OSSRH.
 */
uploadArchives {
    signing {
        sign configurations.archives
    }
    repositories.mavenDeployer {
        logger.lifecycle('OSSRH auth with username: ' + mavenUser)

        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

	    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
            authentication(userName: mavenUser, password: mavenPassword)
        }

        snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
            authentication(userName: mavenUser, password: mavenPassword)
        }

        pom.groupId = groupId
        pom.artifactId = artifactId
        pom.version = version

        // Add other pom properties here if you want (developer details / licenses)
        pom.project {
            name 'Ably java client library'
            description 'A Java Realtime and REST client library for [Ably.io](https://www.ably.io), the realtime messaging service.'
            packaging 'jar'
            inceptionYear '2015'
			url 'https://www.github.com/ably/ably-java'
			developers {
				developer {
					name 'Paddy Byers'
					email 'paddy@ably.io'
					url 'https://github.com/paddybyers'
					id 'paddybyers'
				}
			}
            scm {
                url 'scm:git:https://github.com/ably/ably-java'
                connection 'scm:git:https://github.com/ably/ably-java'
                developerConnection 'scm:git:git@github.com:ably/ably-java'
            }
            organization {
                name 'Ably'
                url 'http://ably.io'
            }
            issueManagement {
                system 'Github'
                url 'https://github.com/ably/ably-java/issues'
            }
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'https://raw.github.com/ably/ably-java/main/LICENSE'
                    distribution 'repo'
                }
            }
        }

        // Exclude test dependencies
        pom.whenConfigured {
            p -> p.dependencies = p.dependencies.findAll {
                dep -> dep.scope == 'runtime'
            }
        }

        // Export files to local storage
        // COMMENT OUT THIS LINE IN ORDER TO RELEASE TO SONATYPE NEXUS STAGING
        // TODO https://github.com/ably/ably-java/issues/566
        repository(url: "file://${localReleaseDest}")
    }
}

task zipRelease(type: Zip) {
    from localReleaseDest
    destinationDir buildDir
    archiveName "release-${version}.zip"
}

task assembleRelease {
    doLast {
        logger.quiet("Release ${version} can be found at ${localReleaseDest}");
        logger.quiet("Release ${version} zipped can be found ${buildDir}/release-${version}.zip");
    }
    dependsOn(uploadArchives)
    dependsOn(zipRelease)
}

task sourcesJar(type: Jar) {
     classifier = 'sources'
     from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
     classifier = 'javadoc'
     from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
