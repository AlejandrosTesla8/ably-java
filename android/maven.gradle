apply plugin: 'maven'
apply plugin: 'signing'

final String GROUP_ID = 'io.ably'
final String ARTIFACT_ID = 'ably-android'
final String LOCAL_RELEASE_DESTINATION = "${buildDir}/release/${version}"
final String MAVEN_USER = hasProperty('ossrhUsername') ? ossrhUsername : ''
final String MAVEN_PASSWORD = hasProperty('ossrhPassword') ? ossrhPassword : ''

/*
 * Task which signs and uploads the Android artifacts to Nexus OSSRH.
 */
uploadArchives {
    signing {
        sign configurations.archives
    }
    repositories.mavenDeployer {
        logger.lifecycle('OSSRH auth with username: ' + MAVEN_USER)

        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
            authentication(userName: MAVEN_USER, password: MAVEN_PASSWORD)
        }

        snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
            authentication(userName: MAVEN_USER, password: MAVEN_PASSWORD)
        }
        pom.groupId = GROUP_ID
        pom.artifactId = ARTIFACT_ID
        pom.version = version

        pom.project {
            name 'Ably Android client library SDK'
            description 'An Android Realtime and REST client library SDK for the Ably platform.'
            packaging 'aar'
            inceptionYear '2015'
            url 'https://www.github.com/ably/ably-java'
            developers {
                developer {
                    id 'ably' // our company org in GitHub: https://github.com/ably
                    name 'Ably' // UK based company: Ably Real-time Ltd
                    email 'support@ably.com'
                    organization 'Ably' // UK based company: Ably Real-time Ltd
                    organizationUrl 'https://ably.com/'
                    url 'https://ably.com/'
                }
            }
            scm {
                url 'scm:git:https://github.com/ably/ably-java'
                connection 'scm:git:https://github.com/ably/ably-java'
                developerConnection 'scm:git:git@github.com:ably/ably-java'
            }
            organization {
                name 'Ably'
                url 'https://ably.com/'
            }
            issueManagement {
                system 'Github'
                url 'https://github.com/ably/ably-java/issues'
            }
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'https://raw.github.com/ably/ably-java/main/LICENSE'
                    distribution 'repo'
                }
            }
        }

        pom.whenConfigured { p ->
            p.dependencies = p.dependencies.findAll {
                    // Exclude dependency on lib subproject.
                dep -> dep.artifactId != 'lib'
            }.findAll {
                    // Exclude Google services since we don't want to impose a particular
                    // version on users. Ideally we would specify a version range,
                    // but the Google services Gradle plugin doesn't seem to
                    // support that.
                    // TODO: Make sure this works when installing from Maven!
                dep -> dep.artifactId != 'play-services-gcm' && dep.artifactId != 'firebase-messaging'
            }
        }

        // Export to local Maven cache
        // COMMENT OUT THIS LINE AND THE ONE BELOW IN ORDER TO RELEASE TO SONATYPE NEXUS STAGING
        // TODO https://github.com/ably/ably-java/issues/566
        repository(url: repositories.mavenLocal().url)

        // Export files to local storage
        // COMMENT OUT THIS LINE AND THE ONE ABOVE IN ORDER TO RELEASE TO SONATYPE NEXUS STAGING
        // TODO https://github.com/ably/ably-java/issues/566
        repository(url: "file://${LOCAL_RELEASE_DESTINATION}")
    }
}

task zipRelease(type: Zip) {
    from LOCAL_RELEASE_DESTINATION
    destinationDir buildDir
    archiveName "release-${version}.zip"
}

tasks.whenTaskAdded { task ->
    if (task.name == 'assembleRelease') {
        task.doLast {
            logger.quiet("Release ${version} can be found at ${LOCAL_RELEASE_DESTINATION}/")
            logger.quiet("Release ${version} zipped can be found ${buildDir}/release-${version}.zip")
        }

        task.dependsOn(uploadArchives)
        task.dependsOn(zipRelease)
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.bootClasspath.join(File.pathSeparator))
    failOnError false
}

afterEvaluate {
    javadoc.classpath += files(android.libraryVariants.collect { variant ->
        variant.javaCompile.classpath.files
    })
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
